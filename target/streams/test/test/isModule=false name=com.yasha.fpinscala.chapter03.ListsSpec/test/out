[0m[[0minfo[0m] [0m[32mListsSpec:[0m[0m
[0m[[0minfo[0m] [0m[32mtail[0m[0m
[0m[[0minfo[0m] [0m[32m- should return the tail of a non-empty list[0m[0m
[0m[[0minfo[0m] [0m[32m- should throw UnsupportedOperationException on an empty list[0m[0m
[0m[[0minfo[0m] [0m[32msetHead[0m[0m
[0m[[0minfo[0m] [0m[32m- should replace the head for a non-empty list[0m[0m
[0m[[0minfo[0m] [0m[32m- should throw UnsupportedOperationException on an empty list[0m[0m
[0m[[0minfo[0m] [0m[32mdrop[0m[0m
[0m[[0minfo[0m] [0m[32m- should drop the first n elements[0m[0m
[0m[[0minfo[0m] [0m[32m- should return the empty list if you try to drop too many elements[0m[0m
[0m[[0minfo[0m] [0m[32mdropWhile[0m[0m
[0m[[0minfo[0m] [0m[32m- should drop elements while the predicate is true on the head[0m[0m
[0m[[0minfo[0m] [0m[32m- should return the empty list if the predicate is always true[0m[0m
[0m[[0minfo[0m] [0m[32minit[0m[0m
[0m[[0minfo[0m] [0m[32m- should drop the last element on non-empty lists[0m[0m
[0m[[0minfo[0m] [0m[32m- should throw UnsupportedOperationException on an empty list[0m[0m
[0m[[0minfo[0m] [0m[32mlengthFunc[0m[0m
[0m[[0minfo[0m] [0m[32m- should calculate the length of a list[0m[0m
[0m[[0minfo[0m] [0m[32msumFL[0m[0m
[0m[[0minfo[0m] [0m[32m- should sum the elements of a list[0m[0m
[0m[[0minfo[0m] [0m[32mproductFL[0m[0m
[0m[[0minfo[0m] [0m[32m- should multiply the elements of a list[0m[0m
[0m[[0minfo[0m] [0m[32mlengthFL[0m[0m
[0m[[0minfo[0m] [0m[32m- should return the length of a list[0m[0m
[0m[[0minfo[0m] [0m[32mreverse[0m[0m
[0m[[0minfo[0m] [0m[32m- should reverse lists with 2+ elements[0m[0m
[0m[[0minfo[0m] [0m[32m- should not affect lists with 0-1 elements[0m[0m
[0m[[0minfo[0m] [0m[32mfoldLeftInFR[0m[0m
[0m[[0minfo[0m] [0m[32m- should still work like a foldLeft[0m[0m
[0m[[0minfo[0m] [0m[32mfoldRightInFL[0m[0m
[0m[[0minfo[0m] [0m[32m- should still work like a foldRight[0m[0m
[0m[[0minfo[0m] [0m[32mappendElement[0m[0m
[0m[[0minfo[0m] [0m[32m- should append an element to the end of a list[0m[0m
[0m[[0minfo[0m] [0m[32mappendList[0m[0m
[0m[[0minfo[0m] [0m[32m- should append a list to the end of a list[0m[0m
[0m[[0minfo[0m] [0m[32maddOne[0m[0m
[0m[[0minfo[0m] [0m[32m- should add one to every element of a list of int[0m[0m
[0m[[0minfo[0m] [0m[32mmapDoublesToStrings[0m[0m
[0m[[0minfo[0m] [0m[32m- should turn a list of double into a matching list of string[0m[0m
[0m[[0minfo[0m] [0m[32mmap[0m[0m
[0m[[0minfo[0m] [0m[32m- should apply a function to each element in a list[0m[0m
[0m[[0minfo[0m] [0m[32mfilter[0m[0m
[0m[[0minfo[0m] [0m[32m- should filter a list based on a predicate[0m[0m
[0m[[0minfo[0m] [0m[32mflatMap[0m[0m
[0m[[0minfo[0m] [0m[32m- should map a function to a list, creating a list of lists, then flatten it[0m[0m
[0m[[0minfo[0m] [0m[32mfilterFM[0m[0m
[0m[[0minfo[0m] [0m[32m- should filter a list based on a predicate[0m[0m
[0m[[0minfo[0m] [0m[32maddElements[0m[0m
[0m[[0minfo[0m] [0m[32m- should add the elements in two lists[0m[0m
[0m[[0minfo[0m] [0m[32m- should truncate to the length of the shorter list[0m[0m
[0m[[0minfo[0m] [0m[32mzipWith[0m[0m
[0m[[0minfo[0m] [0m[32m- should combine the elements in two lists with a provided function[0m[0m
[0m[[0minfo[0m] [0m[32m- should truncate to the length of the shorter list[0m[0m
[0m[[0minfo[0m] [0m[32mtake[0m[0m
[0m[[0minfo[0m] [0m[32m- should take up to n items from a list[0m[0m
[0m[[0minfo[0m] [0m[32mstartsWith[0m[0m
[0m[[0minfo[0m] [0m[32m- should test if the first list starts with the second[0m[0m
[0m[[0minfo[0m] [0m[32mhasSubsequence[0m[0m
[0m[[0minfo[0m] [0m[32m- should test if a list has sub-list[0m[0m
